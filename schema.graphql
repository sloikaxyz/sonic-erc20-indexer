type Account @entity {
  "id is the address of the account"
  id: ID!
  "approvals are a list of approvals that this account has given"
  approvals: [Approval!]! @derivedFrom(field: "owner")
  "Token balances for this account"
  tokenBalances: [TokenBalance!]! @derivedFrom(field: "owner")
}

type Token @entity {
  "id is the token contract address"
  id: ID!
  "address of the token (same as id)"
  address: String!
  "chain ID"
  chain: String!
  "token symbol"
  symbol: String!
  "token name"
  name: String!
  "token decimals"
  decimals: Int!
  "token standard (ERC20)"
  standard: String!
  "project information"
  project: Project
  "token balances"
  tokenBalances: [TokenBalance!]! @derivedFrom(field: "token")
  "market data - a token has exactly one market data entry"
  marketData: MarketData
  "popularity metrics"
  transactionCount: Int!
  transferVolume: BigInt!
  holderCount: Int!
  "timestamp when the token was last updated"
  updatedAt: String!
}

type MarketData @entity {
  "id is the token address"
  id: ID!
  "token this market data belongs to"
  token: Token!
  "price in USD"
  price: DenominatedValue
  "fully diluted valuation"
  fullyDilutedValuation: DenominatedValue
  "market cap"
  marketCap: DenominatedValue
  "total supply"
  totalSupply: BigInt
  "circulating supply"
  circulatingSupply: BigInt
  "24h volume"
  volume24h: BigInt
  "last updated timestamp"
  updatedAt: String!
}

type Project @entity {
  "id is unique identifier for the project"
  id: ID!
  "name of the project"
  name: String!
  "logo URL"
  logoUrl: String
  "safety level indicator (VERIFIED, MEDIUM_WARNING, STRONG_WARNING, BLOCKED)"
  safetyLevel: String
  "indicates if the token is marked as spam"
  isSpam: Boolean
}

type TokenBalance @entity {
  "id is [owner-token]"
  id: ID!
  "quantity of tokens"
  quantity: BigInt!
  "owner of the tokens"
  owner: Account!
  "token information"
  token: Token!
  "denominated value (can be null if price data unavailable)"
  denominatedValue: DenominatedValue
}

type DenominatedValue @entity {
  "id is unique identifier"
  id: ID!
  "currency (USD, etc.)"
  currency: String!
  "value in the specified currency"
  value: BigDecimal!
}

type Portfolio @entity {
  "id is the owner address"
  id: ID!
  "owner address"
  ownerAddress: String!
  "chain"
  chain: String!
  "total value of all tokens"
  tokensTotalDenominatedValue: DenominatedValue
  "Account associated with this portfolio"
  account: Account!
}

type Approval @entity {
  "id is the owner address and spender address [owner-spender]"
  id: ID!
  "amount is the amount of tokens approved"
  amount: BigInt!
  "owner is the account that approved the tokens"
  owner: Account!
  "spender is the account that is approved to spend the tokens"
  spender: Account!
  "token that is being approved"
  token: Token!
}